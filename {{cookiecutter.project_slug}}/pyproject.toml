[project]
name = "{{cookiecutter.project_slug}}"
version = "0.1.0"
description = "{{cookiecutter.project_description}}"
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "fastapi>=0.110.0",
    "uvicorn>=0.27.0",
    "pre-commit>=3.6.0",
    "pydantic[email,timezone]>=2.5.0",
    "pydantic-settings>=2.0.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/{{cookiecutter.project_slug}}"]

[tool.hatch.metadata]
allow-direct-references = true

[project.scripts]
clean-fastapi = "{{cookiecutter.project_slug}}.infrastructure.web.api:main"

# Workspace configuration for modular development
[tool.uv.workspace]
members = [".", "packages/*"]

# Development dependencies
[dependency-groups]
dev = [
    # Testing
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "hypothesis>=6.98.0",
    "faker>=24.0.0",
    "httpx>=0.27.0",
    
    # Linting and formatting
    "ruff>=0.3.0",
    "mypy>=1.9.0",
    
    # Development tools
    "ipython>=8.22.0",
    "pre-commit>=3.6.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
]

# Tool configurations
[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "-v --tb=short"

[tool.mypy]
python_version = "3.11"
strict = true
ignore_missing_imports = false
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_unused_ignores = true
warn_return_any = true
warn_redundant_casts = true
plugins = ["pydantic.mypy"]

[tool.ruff]
target-version = "py311"
line-length = 88
lint.select = ["E", "F", "B", "I", "N", "UP", "PL", "RUF", "SIM", "TD", "ERA"]
lint.ignore = []

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.coverage.run]
source = ["src"]
omit = ["tests/*", "scripts/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if TYPE_CHECKING:",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]